/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*****************************************!*\
  !*** multi ./css/style.css ./js/app.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/andrea/Code/Games/space/css/style.css */1);
module.exports = __webpack_require__(/*! /Users/andrea/Code/Games/space/js/app.js */2);


/***/ }),
/* 1 */
/*!***********************!*\
  !*** ./css/style.css ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Nzcy9zdHlsZS5jc3M/MzJiZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY3NzL3N0eWxlLmNzc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_starfield__ = __webpack_require__(/*! starfield */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_game__ = __webpack_require__(/*! game */ 4);\n// function randomise() {\n//   starfield.stop();\n//   starfield.stars = Math.random()*1000 + 50;\n//   starfield.minVelocity = Math.random()*30+5;\n//   starfield.maxVelocity = Math.random()*50 + starfield.minVelocity;\n//   starfield.start();\n// }\n\n\n\n\nwindow.onload = function () {\n  //  Create the starfield.\n  let container = document.getElementById('starfield');\n  let starfield = new __WEBPACK_IMPORTED_MODULE_0_starfield__[\"a\" /* default */]();\n  starfield.initialise(container);\n  starfield.start();\n\n  //  Setup the canvas.\n  let canvas = document.getElementById(\"gameCanvas\");\n  canvas.width = 800;\n  canvas.height = 600;\n\n  //  Create the game.\n  let game = new __WEBPACK_IMPORTED_MODULE_1_game__[\"a\" /* default */](canvas);\n\n  //  Start the game.\n  game.start();\n\n  //  Listen for keyboard events.\n  window.addEventListener(\"keydown\", function keydown(e) {\n    let keycode = e.which || window.event.keycode;\n    //  Supress further processing of left/right/space (37/29/32)\n    if (keycode == 37 || keycode == 39 || keycode == 32) {\n      e.preventDefault();\n    }\n    game.keyDown(keycode);\n  });\n  window.addEventListener(\"keyup\", function keydown(e) {\n    let keycode = e.which || window.event.keycode;\n    game.keyUp(keycode);\n  });\n\n  function toggleMute() {\n    game.mute();\n    document.getElementById(\"muteLink\").innerText = game.sounds.mute ? \"unmute\" : \"mute\";\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9hcHAuanM/NDFkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmdW5jdGlvbiByYW5kb21pc2UoKSB7XG4vLyAgIHN0YXJmaWVsZC5zdG9wKCk7XG4vLyAgIHN0YXJmaWVsZC5zdGFycyA9IE1hdGgucmFuZG9tKCkqMTAwMCArIDUwO1xuLy8gICBzdGFyZmllbGQubWluVmVsb2NpdHkgPSBNYXRoLnJhbmRvbSgpKjMwKzU7XG4vLyAgIHN0YXJmaWVsZC5tYXhWZWxvY2l0eSA9IE1hdGgucmFuZG9tKCkqNTAgKyBzdGFyZmllbGQubWluVmVsb2NpdHk7XG4vLyAgIHN0YXJmaWVsZC5zdGFydCgpO1xuLy8gfVxuXG5pbXBvcnQgU3RhcmZpZWxkIGZyb20gJ3N0YXJmaWVsZCdcbmltcG9ydCBHYW1lIGZyb20gJ2dhbWUnXG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgLy8gIENyZWF0ZSB0aGUgc3RhcmZpZWxkLlxuICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJmaWVsZCcpO1xuICBsZXQgc3RhcmZpZWxkID0gbmV3IFN0YXJmaWVsZCgpO1xuICBzdGFyZmllbGQuaW5pdGlhbGlzZShjb250YWluZXIpO1xuICBzdGFyZmllbGQuc3RhcnQoKTtcblxuICAvLyAgU2V0dXAgdGhlIGNhbnZhcy5cbiAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZUNhbnZhc1wiKTtcbiAgY2FudmFzLndpZHRoID0gODAwO1xuICBjYW52YXMuaGVpZ2h0ID0gNjAwO1xuXG4gIC8vICBDcmVhdGUgdGhlIGdhbWUuXG4gIGxldCBnYW1lID0gbmV3IEdhbWUoY2FudmFzKTtcblxuICAvLyAgU3RhcnQgdGhlIGdhbWUuXG4gIGdhbWUuc3RhcnQoKTtcblxuICAvLyAgTGlzdGVuIGZvciBrZXlib2FyZCBldmVudHMuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiBrZXlkb3duKGUpIHtcbiAgICBsZXQga2V5Y29kZSA9IGUud2hpY2ggfHwgd2luZG93LmV2ZW50LmtleWNvZGU7XG4gICAgLy8gIFN1cHJlc3MgZnVydGhlciBwcm9jZXNzaW5nIG9mIGxlZnQvcmlnaHQvc3BhY2UgKDM3LzI5LzMyKVxuICAgIGlmKGtleWNvZGUgPT0gMzcgfHwga2V5Y29kZSA9PSAzOSB8fCBrZXljb2RlID09IDMyKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGdhbWUua2V5RG93bihrZXljb2RlKTtcbiAgfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgZnVuY3Rpb24ga2V5ZG93bihlKSB7XG4gICAgbGV0IGtleWNvZGUgPSBlLndoaWNoIHx8IHdpbmRvdy5ldmVudC5rZXljb2RlO1xuICAgIGdhbWUua2V5VXAoa2V5Y29kZSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZU11dGUoKSB7XG4gICAgZ2FtZS5tdXRlKCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtdXRlTGlua1wiKS5pbm5lclRleHQgPSBnYW1lLnNvdW5kcy5tdXRlID8gXCJ1bm11dGVcIiA6IFwibXV0ZVwiO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ganMvYXBwLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!*************************!*\
  !*** ./js/starfield.js ***!
  \*************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("class Starfield {\n  constructor() {\n    this.fps = 30;\n    this.canvas = document.createElement('canvas');\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.minVelocity = 15;\n    this.maxVelocity = 30;\n    this.intervalId = 0;\n    this.starsQuantity = 100;\n    this.stars = [];\n  }\n\n  initialise(div) {\n    let self = this;\n\n    window.addEventListener('resize', event => {\n      self.width = window.innerWidth;\n      self.height = window.innerHeight;\n      self.canvas.width = self.width;\n      self.canvas.height = self.height;\n      self.draw();\n    });\n\n    //\tCreate the canvas.\n    div.appendChild(this.canvas);\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n  }\n\n  start() {\n    //\tCreate the stars.\n    for (let i = 0; i < this.starsQuantity; i++) {\n      this.stars[i] = new Star(this.width, this.height, this.minVelocity, this.maxVelocity);\n    }\n\n    let self = this;\n\n    //\tStart the timer.\n    this.intervalId = setInterval(() => {\n      self.update();\n      self.draw();\n    }, 1000 / this.fps);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n\n  update() {\n    let dt = 1 / this.fps;\n\n    this.stars.forEach((star, idx) => {\n      star.y += dt * star.velocity;\n\n      if (star.y > this.height) {\n        this.stars[idx] = new Star(this.width, 0, this.minVelocity, this.maxVelocity);\n      }\n    });\n  }\n\n  draw() {\n    //\tGet the drawing context.\n    let ctx = this.canvas.getContext(\"2d\");\n\n    //\tDraw the background.\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, this.width, this.height);\n\n    //\tDraw stars.\n    ctx.fillStyle = '#ffffff';\n\n    this.stars.forEach(star => {\n      ctx.fillRect(star.x, star.y, star.size, star.size);\n    });\n  }\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Starfield;\n\n\nfunction Star(x, y, velocityMin, velocityMax) {\n  this.x = Math.random() * x;\n  this.y = Math.random() * y;\n  this.size = Math.random() * 3 + 1;\n  this.velocity = Math.random() * (velocityMax - velocityMin) + velocityMin;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9zdGFyZmllbGQuanM/YzIwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTdGFyZmllbGQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZwcyA9IDMwXG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIHRoaXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0XG4gICAgdGhpcy5taW5WZWxvY2l0eSA9IDE1XG4gICAgdGhpcy5tYXhWZWxvY2l0eSA9IDMwXG4gICAgdGhpcy5pbnRlcnZhbElkID0gMFxuICAgIHRoaXMuc3RhcnNRdWFudGl0eSA9IDEwMFxuICAgIHRoaXMuc3RhcnMgPSBbXVxuICB9XG5cbiAgaW5pdGlhbGlzZShkaXYpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXNcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoZXZlbnQpID0+IHtcbiAgICAgIHNlbGYud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgc2VsZi5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgIHNlbGYuY2FudmFzLndpZHRoID0gc2VsZi53aWR0aFxuICAgICAgc2VsZi5jYW52YXMuaGVpZ2h0ID0gc2VsZi5oZWlnaHRcbiAgICAgIHNlbGYuZHJhdygpXG4gICAgfSlcblxuICAgIC8vXHRDcmVhdGUgdGhlIGNhbnZhcy5cbiAgICBkaXYuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLndpZHRoXG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5oZWlnaHRcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIC8vXHRDcmVhdGUgdGhlIHN0YXJzLlxuICAgIGZvcihsZXQgaT0wOyBpIDwgdGhpcy5zdGFyc1F1YW50aXR5OyBpKyspIHtcbiAgICAgIHRoaXMuc3RhcnNbaV0gPSBuZXcgU3RhciggdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMubWluVmVsb2NpdHksIHRoaXMubWF4VmVsb2NpdHkgKVxuICAgIH1cblxuICAgIGxldCBzZWxmID0gdGhpc1xuXG4gICAgLy9cdFN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aGlzLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBzZWxmLnVwZGF0ZSgpXG4gICAgICBzZWxmLmRyYXcoKVxuICAgIH0sIDEwMDAgLyB0aGlzLmZwcylcbiAgfVxuXG4gIHN0b3AoKSB7IGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKSB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGxldCBkdCA9IDEgLyB0aGlzLmZwcztcblxuICAgIHRoaXMuc3RhcnMuZm9yRWFjaCgoc3RhciwgaWR4KSA9PiB7XG4gICAgICBzdGFyLnkgKz0gZHQgKiBzdGFyLnZlbG9jaXR5XG5cbiAgICAgIGlmIChzdGFyLnkgPiB0aGlzLmhlaWdodCkge1xuICAgICAgICB0aGlzLnN0YXJzW2lkeF0gPSBuZXcgU3RhciggdGhpcy53aWR0aCwgMCwgdGhpcy5taW5WZWxvY2l0eSwgdGhpcy5tYXhWZWxvY2l0eSApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRyYXcoKSB7XG4gICAgLy9cdEdldCB0aGUgZHJhd2luZyBjb250ZXh0LlxuICAgIGxldCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcblxuICAgIC8vXHREcmF3IHRoZSBiYWNrZ3JvdW5kLlxuICAgIGN0eC5maWxsU3R5bGUgPSAnIzAwMDAwMCdcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXG5cbiAgICAvL1x0RHJhdyBzdGFycy5cbiAgICBjdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnXG5cbiAgICB0aGlzLnN0YXJzLmZvckVhY2goKHN0YXIpID0+IHtcbiAgICAgIGN0eC5maWxsUmVjdChzdGFyLngsIHN0YXIueSwgc3Rhci5zaXplLCBzdGFyLnNpemUpXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBTdGFyKHgsIHksIHZlbG9jaXR5TWluLCB2ZWxvY2l0eU1heCkge1xuICB0aGlzLnggPSBNYXRoLnJhbmRvbSgpICogeFxuICB0aGlzLnkgPSBNYXRoLnJhbmRvbSgpICogeVxuICB0aGlzLnNpemUgPSBNYXRoLnJhbmRvbSgpICogMyArIDFcbiAgdGhpcy52ZWxvY2l0eSA9IChNYXRoLnJhbmRvbSgpICogKHZlbG9jaXR5TWF4IC0gdmVsb2NpdHlNaW4pKSArIHZlbG9jaXR5TWluXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ganMvc3RhcmZpZWxkLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXpFQTtBQUFBO0FBQUE7QUFDQTtBQTJFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!********************!*\
  !*** ./js/game.js ***!
  \********************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/*\nspaceinvaders.js\n\nthe core logic for the space invaders game.\n\n*/\n\n/*\nGame Class\n\nThe Game class represents a Space Invaders game.\nCreate an instance of it, change any of the default values\nin the settings, and call 'start' to run the game.\n\nCall 'initialise' before 'start' to set the canvas the game\nwill draw to.\n\nCall 'moveShip' or 'shipFire' to control the ship.\n\nListen for 'gameWon' or 'gameLost' events to handle the game\nending.\n*/\n\n//  Creates an instance of the Game class.\nclass Game {\n  constructor(gameCanvas) {\n    //  Set the initial config.\n    this.config = {\n      bombRate: 0.05,\n      bombMinVelocity: 50,\n      bombMaxVelocity: 50,\n      invaderInitialVelocity: 25,\n      invaderAcceleration: 0,\n      invaderDropDistance: 20,\n      rocketVelocity: 120,\n      rocketMaxFireRate: 2,\n      gameWidth: 400,\n      gameHeight: 300,\n      fps: 50,\n      debugMode: false,\n      invaderRanks: 5,\n      invaderFiles: 10,\n      shipSpeed: 120,\n      levelDifficultyMultiplier: 0.2,\n      pointsPerInvader: 5\n\n      //  All state is in the variables below.\n    };this.lives = 3;\n    this.width = gameCanvas.width;\n    this.height = gameCanvas.height;\n    this.gameBounds = {\n      left: gameCanvas.width / 2 - this.config.gameWidth / 2,\n      right: gameCanvas.width / 2 + this.config.gameWidth / 2,\n      top: gameCanvas.height / 2 - this.config.gameHeight / 2,\n      bottom: gameCanvas.height / 2 + this.config.gameHeight / 2\n    };\n    this.intervalId = 0;\n    this.score = 0;\n    this.level = 1;\n\n    //  The state stack.\n    this.stateStack = [];\n\n    //  Input/output\n    this.pressedKeys = {};\n    this.gameCanvas = gameCanvas;\n\n    //  All sounds.\n    this.sounds = null;\n  }\n\n  moveToState(state) {\n    //  If we are in a state, leave it.\n    if (this.currentState() && this.currentState().leave) {\n      this.currentState().leave(game);\n      this.stateStack.pop();\n    }\n    //  If there's an enter function for the new state, call it.\n    if (state.enter) {\n      state.enter(this);\n    }\n\n    //  Set the current state.\n    this.stateStack.pop();\n    this.stateStack.push(state);\n  }\n\n  //  Start the Game.\n  start() {\n    //  Move into the 'welcome' state.\n    this.moveToState(new WelcomeState());\n\n    //  Set the game variables.\n    this.lives = 3;\n    this.config.debugMode = /debug=true/.test(window.location.href);\n    //  Start the game loop.\n    this.intervalId = setInterval(() => {\n      GameLoop(this);\n    }, 1000 / this.config.fps);\n  }\n\n  //  Returns the current state.\n  currentState() {\n    return this.stateStack.length > 0 ? this.stateStack[this.stateStack.length - 1] : null;\n  }\n\n  //  Mutes or unmutes the game.\n  mute(mute) {\n    //  If we've been told to mute, mute.\n    if (mute === true) {\n      this.sounds.mute = true;\n    } else if (mute === false) {\n      this.sounds.mute = false;\n    } else {\n      // Toggle mute instead...\n      this.sounds.mute = this.sounds.mute ? false : true;\n    }\n  }\n\n  pushState(state) {\n    //  If there's an enter function for the new state, call it.\n    if (state.enter) {\n      state.enter(game);\n    }\n    //  Set the current state.\n    this.stateStack.push(state);\n  }\n\n  popState() {\n    //  Leave and pop the state.\n    if (this.currentState()) {\n      if (this.currentState().leave) {\n        this.currentState().leave(game);\n      }\n\n      //  Set the current state.\n      this.stateStack.pop();\n    }\n  }\n\n  //  The stop function stops the game.\n  stop() {\n    clearInterval(this.intervalId);\n  }\n\n  //  Inform the game a key is down.\n  keyDown(keyCode) {\n    this.pressedKeys[keyCode] = true;\n    //  Delegate to the current state too.\n    if (this.currentState() && this.currentState().keyDown) {\n      this.currentState().keyDown(this, keyCode);\n    }\n  }\n\n  //  Inform the game a key is up.\n  keyUp(keyCode) {\n    delete this.pressedKeys[keyCode];\n    //  Delegate to the current state too.\n    if (this.currentState() && this.currentState().keyUp) {\n      this.currentState().keyUp(this, keyCode);\n    }\n  }\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Game;\n\n\n//  The main loop.\nfunction GameLoop(game) {\n  let currentState = game.currentState();\n  if (currentState) {\n\n    //  Delta t is the time to update/draw.\n    let dt = 1 / game.config.fps;\n\n    //  Get the drawing context.\n    let ctx = game.gameCanvas.getContext(\"2d\");\n\n    //  Update if we have an update function. Also draw\n    //  if we have a draw function.\n    if (currentState.update) {\n      currentState.update(game, dt);\n    }\n    if (currentState.draw) {\n      currentState.draw(game, dt, ctx);\n    }\n  }\n}\n\nclass WelcomeState {\n  enter(game) {\n    // Create and load the sounds.\n    game.sounds = new Sounds();\n    game.sounds.init();\n    game.sounds.loadSound('shoot', 'sounds/shoot.wav');\n    game.sounds.loadSound('bang', 'sounds/bang.wav');\n    game.sounds.loadSound('explosion', 'sounds/explosion.wav');\n  }\n\n  update(game, dt) {}\n\n  draw(game, dt, ctx) {\n    //  Clear the background.\n    ctx.clearRect(0, 0, game.width, game.height);\n\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = '#ffffff';\n    ctx.textBaseline = \"center\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Space Invaders\", game.width / 2, game.height / 2 - 40);\n    ctx.font = \"16px Arial\";\n\n    ctx.fillText(\"Press 'Space' to start.\", game.width / 2, game.height / 2);\n  }\n\n  keyDown(game, keyCode) {\n    if (keyCode == 32) /*space*/{\n        //  Space starts the game.\n        game.level = 1;\n        game.score = 0;\n        game.lives = 3;\n        game.moveToState(new LevelIntroState(game.level));\n      }\n  }\n}\n\nclass GameOverState {\n  update(game, dt) {}\n\n  draw(game, dt, ctx) {\n    //  Clear the background.\n    ctx.clearRect(0, 0, game.width, game.height);\n\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = '#ffffff';\n    ctx.textBaseline = \"center\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Game Over!\", game.width / 2, game.height / 2 - 40);\n    ctx.font = \"16px Arial\";\n    ctx.fillText(\"You scored \" + game.score + \" and got to level \" + game.level, game.width / 2, game.height / 2);\n    ctx.font = \"16px Arial\";\n    ctx.fillText(\"Press 'Space' to play again.\", game.width / 2, game.height / 2 + 40);\n  }\n\n  keyDown(game, keyCode) {\n    if (keyCode == 32) /*space*/{\n        //  Space restarts the game.\n        game.lives = 3;\n        game.score = 0;\n        game.level = 1;\n        game.moveToState(new LevelIntroState(1));\n      }\n  }\n}\n\n//  Create a PlayState with the game config and the level you are on.\nclass PlayState {\n  constructor(config, level) {\n    this.config = config;\n    this.level = level;\n\n    //  Game state.\n    this.invaderCurrentVelocity = 10;\n    this.invaderCurrentDropDistance = 0;\n    this.invadersAreDropping = false;\n    this.lastRocketTime = null;\n\n    //  Game entities.\n    this.ship = null;\n    this.invaders = [];\n    this.rockets = [];\n    this.bombs = [];\n  }\n\n  enter(game) {\n    //  Create the ship.\n    this.ship = new Ship(game.width / 2, game.gameBounds.bottom);\n\n    //  Setup initial state.\n    this.invaderCurrentVelocity = 10;\n    this.invaderCurrentDropDistance = 0;\n    this.invadersAreDropping = false;\n\n    //  Set the ship speed for this level, as well as invader params.\n    let levelMultiplier = this.level * this.config.levelDifficultyMultiplier;\n    this.shipSpeed = this.config.shipSpeed;\n    this.invaderInitialVelocity = this.config.invaderInitialVelocity + levelMultiplier * this.config.invaderInitialVelocity;\n    this.bombRate = this.config.bombRate + levelMultiplier * this.config.bombRate;\n    this.bombMinVelocity = this.config.bombMinVelocity + levelMultiplier * this.config.bombMinVelocity;\n    this.bombMaxVelocity = this.config.bombMaxVelocity + levelMultiplier * this.config.bombMaxVelocity;\n\n    //  Create the invaders.\n    let ranks = this.config.invaderRanks;\n    let files = this.config.invaderFiles;\n    let invaders = [];\n    for (let rank = 0; rank < ranks; rank++) {\n      for (let file = 0; file < files; file++) {\n        invaders.push(new Invader(game.width / 2 + (files / 2 - file) * 200 / files, game.gameBounds.top + rank * 20, rank, file, 'Invader'));\n      }\n    }\n    this.invaders = invaders;\n    this.invaderCurrentVelocity = this.invaderInitialVelocity;\n    this.invaderVelocity = { x: -this.invaderInitialVelocity, y: 0 };\n    this.invaderNextVelocity = null;\n  }\n\n  update(game, dt) {\n    //  If the left or right arrow keys are pressed, move\n    //  the ship. Check this on ticks rather than via a keydown\n    //  event for smooth movement, otherwise the ship would move\n    //  more like a text editor caret.\n    if (game.pressedKeys[37]) {\n      this.ship.x -= this.shipSpeed * dt;\n    }\n    if (game.pressedKeys[39]) {\n      this.ship.x += this.shipSpeed * dt;\n    }\n    if (game.pressedKeys[32]) {\n      this.fireRocket();\n    }\n\n    //  Keep the ship in bounds.\n    if (this.ship.x < game.gameBounds.left) {\n      this.ship.x = game.gameBounds.left;\n    }\n    if (this.ship.x > game.gameBounds.right) {\n      this.ship.x = game.gameBounds.right;\n    }\n\n    //  Move each bomb.\n    for (let i = 0; i < this.bombs.length; i++) {\n      let bomb = this.bombs[i];\n      bomb.y += dt * bomb.velocity;\n\n      //  If the rocket has gone off the screen remove it.\n      if (bomb.y > this.height) {\n        this.bombs.splice(i--, 1);\n      }\n    }\n\n    //  Move each rocket.\n    for (let i = 0; i < this.rockets.length; i++) {\n      let rocket = this.rockets[i];\n      rocket.y -= dt * rocket.velocity;\n\n      //  If the rocket has gone off the screen remove it.\n      if (rocket.y < 0) {\n        this.rockets.splice(i--, 1);\n      }\n    }\n\n    //  Move the invaders.\n    let hitLeft = false,\n        hitRight = false,\n        hitBottom = false;\n    for (let i = 0; i < this.invaders.length; i++) {\n      let invader = this.invaders[i];\n      let newx = invader.x + this.invaderVelocity.x * dt;\n      let newy = invader.y + this.invaderVelocity.y * dt;\n      if (hitLeft == false && newx < game.gameBounds.left) {\n        hitLeft = true;\n      } else if (hitRight == false && newx > game.gameBounds.right) {\n        hitRight = true;\n      } else if (hitBottom == false && newy > game.gameBounds.bottom) {\n        hitBottom = true;\n      }\n\n      if (!hitLeft && !hitRight && !hitBottom) {\n        invader.x = newx;\n        invader.y = newy;\n      }\n    }\n\n    //  Update invader velocities.\n    if (this.invadersAreDropping) {\n      this.invaderCurrentDropDistance += this.invaderVelocity.y * dt;\n      if (this.invaderCurrentDropDistance >= this.config.invaderDropDistance) {\n        this.invadersAreDropping = false;\n        this.invaderVelocity = this.invaderNextVelocity;\n        this.invaderCurrentDropDistance = 0;\n      }\n    }\n    //  If we've hit the left, move down then right.\n    if (hitLeft) {\n      this.invaderCurrentVelocity += this.config.invaderAcceleration;\n      this.invaderVelocity = { x: 0, y: this.invaderCurrentVelocity };\n      this.invadersAreDropping = true;\n      this.invaderNextVelocity = { x: this.invaderCurrentVelocity, y: 0 };\n    }\n    //  If we've hit the right, move down then left.\n    if (hitRight) {\n      this.invaderCurrentVelocity += this.config.invaderAcceleration;\n      this.invaderVelocity = { x: 0, y: this.invaderCurrentVelocity };\n      this.invadersAreDropping = true;\n      this.invaderNextVelocity = { x: -this.invaderCurrentVelocity, y: 0 };\n    }\n    //  If we've hit the bottom, it's game over.\n    if (hitBottom) {\n      this.lives = 0;\n    }\n\n    //  Check for rocket/invader collisions.\n    for (let i = 0; i < this.invaders.length; i++) {\n      let invader = this.invaders[i];\n      let bang = false;\n\n      for (let j = 0; j < this.rockets.length; j++) {\n        let rocket = this.rockets[j];\n\n        if (rocket.x >= invader.x - invader.width / 2 && rocket.x <= invader.x + invader.width / 2 && rocket.y >= invader.y - invader.height / 2 && rocket.y <= invader.y + invader.height / 2) {\n\n          //  Remove the rocket, set 'bang' so we don't process\n          //  this rocket again.\n          this.rockets.splice(j--, 1);\n          bang = true;\n          game.score += this.config.pointsPerInvader;\n          break;\n        }\n      }\n      if (bang) {\n        this.invaders.splice(i--, 1);\n        game.sounds.playSound('bang');\n      }\n    }\n\n    //  Find all of the front rank invaders.\n    let frontRankInvaders = {};\n    for (let i = 0; i < this.invaders.length; i++) {\n      let invader = this.invaders[i];\n      //  If we have no invader for game file, or the invader\n      //  for game file is futher behind, set the front\n      //  rank invader to game one.\n      if (!frontRankInvaders[invader.file] || frontRankInvaders[invader.file].rank < invader.rank) {\n        frontRankInvaders[invader.file] = invader;\n      }\n    }\n\n    //  Give each front rank invader a chance to drop a bomb.\n    for (let i = 0; i < this.config.invaderFiles; i++) {\n      let invader = frontRankInvaders[i];\n      if (!invader) continue;\n      let chance = this.bombRate * dt;\n      if (chance > Math.random()) {\n        //  Fire!\n        this.bombs.push(new Bomb(invader.x, invader.y + invader.height / 2, this.bombMinVelocity + Math.random() * (this.bombMaxVelocity - this.bombMinVelocity)));\n      }\n    }\n\n    //  Check for bomb/ship collisions.\n    for (let i = 0; i < this.bombs.length; i++) {\n      let bomb = this.bombs[i];\n      if (bomb.x >= this.ship.x - this.ship.width / 2 && bomb.x <= this.ship.x + this.ship.width / 2 && bomb.y >= this.ship.y - this.ship.height / 2 && bomb.y <= this.ship.y + this.ship.height / 2) {\n        this.bombs.splice(i--, 1);\n        game.lives--;\n        game.sounds.playSound('explosion');\n      }\n    }\n\n    //  Check for invader/ship collisions.\n    for (let i = 0; i < this.invaders.length; i++) {\n      let invader = this.invaders[i];\n      if (invader.x + invader.width / 2 > this.ship.x - this.ship.width / 2 && invader.x - invader.width / 2 < this.ship.x + this.ship.width / 2 && invader.y + invader.height / 2 > this.ship.y - this.ship.height / 2 && invader.y - invader.height / 2 < this.ship.y + this.ship.height / 2) {\n        //  Dead by collision!\n        game.lives = 0;\n        game.sounds.playSound('explosion');\n      }\n    }\n\n    //  Check for failure\n    if (game.lives <= 0) {\n      game.moveToState(new GameOverState());\n    }\n\n    //  Check for victory\n    if (this.invaders.length === 0) {\n      game.score += this.level * 50;\n      game.level += 1;\n      game.moveToState(new LevelIntroState(game.level));\n    }\n  }\n\n  draw(game, dt, ctx) {\n    //  Clear the background.\n    ctx.clearRect(0, 0, game.width, game.height);\n\n    //  Draw ship.\n    ctx.fillStyle = '#999999';\n    ctx.fillRect(this.ship.x - this.ship.width / 2, this.ship.y - this.ship.height / 2, this.ship.width, this.ship.height);\n\n    //  Draw invaders.\n    ctx.fillStyle = '#006600';\n    for (let i = 0; i < this.invaders.length; i++) {\n      let invader = this.invaders[i];\n      ctx.fillRect(invader.x - invader.width / 2, invader.y - invader.height / 2, invader.width, invader.height);\n    }\n\n    //  Draw bombs.\n    ctx.fillStyle = '#ff5555';\n    for (let i = 0; i < this.bombs.length; i++) {\n      let bomb = this.bombs[i];\n      ctx.fillRect(bomb.x - 2, bomb.y - 2, 4, 4);\n    }\n\n    //  Draw rockets.\n    ctx.fillStyle = '#ff0000';\n    for (let i = 0; i < this.rockets.length; i++) {\n      let rocket = this.rockets[i];\n      ctx.fillRect(rocket.x, rocket.y - 2, 1, 4);\n    }\n\n    //  Draw info.\n    let textYpos = game.gameBounds.bottom + (game.height - game.gameBounds.bottom) / 2 + 14 / 2;\n    ctx.font = \"14px Arial\";\n    ctx.fillStyle = '#ffffff';\n    let info = \"Lives: \" + game.lives;\n    ctx.textAlign = \"left\";\n    ctx.fillText(info, game.gameBounds.left, textYpos);\n    info = \"Score: \" + game.score + \", Level: \" + game.level;\n    ctx.textAlign = \"right\";\n    ctx.fillText(info, game.gameBounds.right, textYpos);\n\n    //  If we're in debug mode, draw bounds.\n    if (this.config.debugMode) {\n      ctx.strokeStyle = '#ff0000';\n      ctx.strokeRect(0, 0, game.width, game.height);\n      ctx.strokeRect(game.gameBounds.left, game.gameBounds.top, game.gameBounds.right - game.gameBounds.left, game.gameBounds.bottom - game.gameBounds.top);\n    }\n  }\n\n  keyDown(game, keyCode) {\n    if (keyCode == 32) {\n      //  Fire!\n      this.fireRocket();\n    }\n    if (keyCode == 80) {\n      //  Push the pause state.\n      game.pushState(new PauseState());\n    }\n  }\n\n  keyUp(game, keyCode) {}\n\n  fireRocket() {\n    //  If we have no last rocket time, or the last rocket time\n    //  is older than the max rocket rate, we can fire.\n    if (this.lastRocketTime === null || new Date().valueOf() - this.lastRocketTime > 1000 / this.config.rocketMaxFireRate) {\n      //  Add a rocket.\n      this.rockets.push(new Rocket(this.ship.x, this.ship.y - 12, this.config.rocketVelocity));\n      this.lastRocketTime = new Date().valueOf();\n\n      //  Play the 'shoot' sound.\n      game.sounds.playSound('shoot');\n    }\n  }\n}\n\nclass PauseState {\n  keyDown(game, keyCode) {\n\n    if (keyCode == 80) {\n      //  Pop the pause state.\n      game.popState();\n    }\n  }\n\n  draw(game, dt, ctx) {\n    //  Clear the background.\n    ctx.clearRect(0, 0, game.width, game.height);\n\n    ctx.font = \"14px Arial\";\n    ctx.fillStyle = '#ffffff';\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Paused\", game.width / 2, game.height / 2);\n    return;\n  }\n}\n\n/*\nLevel Intro State\n\nThe Level Intro state shows a 'Level X' message and\na countdown for the level.\n*/\nclass LevelIntroState {\n  constructor(level) {\n    this.level = level;\n    this.countdownMessage = \"3\";\n  }\n\n  update(game, dt) {\n    //  Update the countdown.\n    if (this.countdown === undefined) {\n      this.countdown = 3; // countdown from 3 secs\n    }\n    this.countdown -= dt;\n\n    if (this.countdown < 2) {\n      this.countdownMessage = \"2\";\n    }\n    if (this.countdown < 1) {\n      this.countdownMessage = \"1\";\n    }\n    if (this.countdown <= 0) {\n      //  Move to the next level, popping this state.\n      game.moveToState(new PlayState(game.config, this.level));\n    }\n  }\n\n  draw(game, dt, ctx) {\n    //  Clear the background.\n    ctx.clearRect(0, 0, game.width, game.height);\n\n    ctx.font = \"36px Arial\";\n    ctx.fillStyle = '#ffffff';\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Level \" + this.level, game.width / 2, game.height / 2);\n    ctx.font = \"24px Arial\";\n    ctx.fillText(\"Ready in \" + this.countdownMessage, game.width / 2, game.height / 2 + 36);\n    return;\n  }\n}\n\n/*\n\nShip\n\nThe ship has a position and that's about it.\n\n*/\nfunction Ship(x, y) {\n  this.x = x;\n  this.y = y;\n  this.width = 20;\n  this.height = 16;\n}\n\n/*\nRocket\n\nFired by the ship, they've got a position, velocity and state.\n\n*/\nfunction Rocket(x, y, velocity) {\n  this.x = x;\n  this.y = y;\n  this.velocity = velocity;\n}\n\n/*\nBomb\n\nDropped by invaders, they've got position, velocity.\n\n*/\nfunction Bomb(x, y, velocity) {\n  this.x = x;\n  this.y = y;\n  this.velocity = velocity;\n}\n\n/*\nInvader\n\nInvader's have position, type, rank/file and that's about it.\n*/\n\nfunction Invader(x, y, rank, file, type) {\n  this.x = x;\n  this.y = y;\n  this.rank = rank;\n  this.file = file;\n  this.type = type;\n  this.width = 18;\n  this.height = 14;\n}\n\n/*\nGame State\n\nA Game State is simply an update and draw proc.\nWhen a game is in the state, the update and draw procs are\ncalled, with a dt value (dt is delta time, i.e. the number)\nof seconds to update or draw).\n\n*/\nfunction GameState(updateProc, drawProc, keyDown, keyUp, enter, leave) {\n  this.updateProc = updateProc;\n  this.drawProc = drawProc;\n  this.keyDown = keyDown;\n  this.keyUp = keyUp;\n  this.enter = enter;\n  this.leave = leave;\n}\n\n/*\n\nSounds\n\nThe sounds class is used to asynchronously load sounds and allow\nthem to be played.\n\n*/\nclass Sounds {\n  constructor() {\n    //  The audio context.\n    this.audioContext = null;\n    //  The actual set of loaded sounds.\n    this.sounds = {};\n  }\n\n  init() {\n    //  Create the audio context, paying attention to webkit browsers.\n    let context = window.AudioContext || window.webkitAudioContext;\n    this.audioContext = new context();\n    this.mute = false;\n  }\n\n  loadSound(name, url) {\n    //  Reference to ourselves for closures.\n    let self = this;\n\n    //  Create an entry in the sounds object.\n    this.sounds[name] = null;\n\n    //  Create an asynchronous request for the sound.\n    let req = new XMLHttpRequest();\n    req.open('GET', url, true);\n    req.responseType = 'arraybuffer';\n    req.onload = function () {\n      self.audioContext.decodeAudioData(req.response, function (buffer) {\n        self.sounds[name] = { buffer: buffer };\n      });\n    };\n    try {\n      req.send();\n    } catch (e) {\n      console.log(\"An exception occured getting sound the sound \" + name + \" this might be \" + \"because the page is running from the file system, not a webserver.\");\n      console.log(e);\n    }\n  }\n\n  playSound(name) {\n    //  If we've not got the sound, don't bother playing it.\n    if (this.sounds[name] === undefined || this.sounds[name] === null || this.mute === true) {\n      return;\n    }\n\n    //  Create a sound source, set the buffer, connect to the speakers and\n    //  play the sound.\n    let source = this.audioContext.createBufferSource();\n    source.buffer = this.sounds[name].buffer;\n    source.connect(this.audioContext.destination);\n    source.start(0);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ })
/******/ ]);